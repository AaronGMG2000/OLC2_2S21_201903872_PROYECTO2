
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CDER CIZQ COLON COMMA DISTINT DIV EQUALS EQUALSEQUALS FLOAT64 FLOATLITERAL FMT FUNC GOTO GREATER GREATEREQUAL ID IF IMPORT INT INTLITERAL LDER LESS LESSEQUAL LIZQ MATH MINUS MOD MULTI PACKAGE PDER PIZQ PLUS PRINTF PTCOMA PUNTO RETURN STRINGLITERAL VARstart :  PACKAGE ID PTCOMA IMPORT PIZQ IMPORTS PDER PTCOMA declarations codeListIMPORTS : STRINGLITERAL\n               | STRINGLITERAL PTCOMA STRINGLITERAL PTCOMAdeclarations : declarations declaration\n                    | declarationdeclaration :    VAR idList CIZQ INTLITERAL CDER FLOAT64 PTCOMA\n                    |   VAR idList type PTCOMAtype : INT\n            | FLOAT64idList :   idList COMMA ID\n                | IDcodeList : codeList code\n                | codecode : FUNC ID PIZQ PDER statementstatement : LIZQ instructions LDERinstructions : instructions instruction\n                    | instructioninstruction :  assign PTCOMA\n                    | print PTCOMA\n                    | if\n                    | gotoSt PTCOMA\n                    | label\n                    | callFunc PTCOMA\n                    | retSt PTCOMAretSt : RETURNcallFunc : ID PIZQ PDERlabel : ID COLONgotoSt : GOTO IDif : IF expression LIZQ GOTO ID PTCOMA LDERassign : access EQUALS finalExpassign :   ID EQUALS expression\n                | ID EQUALS accessprint : FMT PUNTO PRINTF PIZQ STRINGLITERAL COMMA printValue PDERprintValue :   INT PIZQ finalExp PDER\n                    | finalExpexpression :   finalExp PLUS finalExp\n                    | finalExp MINUS finalExp\n                    | finalExp MULTI finalExp\n                    | finalExp DIV finalExp\n                    | finalExp GREATER finalExp\n                    | finalExp LESS finalExp\n                    | finalExp GREATEREQUAL finalExp\n                    | finalExp LESSEQUAL finalExp\n                    | finalExp EQUALSEQUALS finalExp\n                    | finalExp DISTINT finalExp\n                    | MATH PUNTO MOD PIZQ finalExp COMMA finalExp PDER\n                    | finalExpfinalExp : ID\n                | INTLITERAL\n                | MINUS INTLITERAL\n                | FLOATLITERALaccess :   ID CIZQ INT PIZQ finalExp PDER CDER\n                | ID CIZQ finalExp CDER'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,17,19,23,36,55,],[0,-1,-13,-12,-14,-15,]),'ID':([2,15,20,28,37,39,40,43,45,51,52,56,57,58,59,60,61,62,63,64,66,85,86,87,88,89,90,91,92,93,94,97,100,115,117,124,125,127,],[3,22,24,33,49,49,-17,-20,-22,69,75,-16,-18,-19,-21,-23,-24,69,77,-27,69,69,69,69,69,69,69,69,69,69,69,69,114,69,69,-29,69,69,]),'PTCOMA':([3,8,9,12,26,27,29,38,41,42,44,46,47,53,69,70,73,74,75,76,77,78,79,80,95,98,101,102,103,104,105,106,107,108,109,110,114,120,126,130,],[4,10,11,16,-9,32,-8,54,57,58,59,60,61,-25,-48,-47,-49,-51,-28,-30,-48,-31,-32,-26,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,118,-52,-33,-46,]),'IMPORT':([4,],[5,]),'PIZQ':([5,24,49,81,83,111,122,],[6,30,65,97,99,115,127,]),'STRINGLITERAL':([6,10,99,],[8,12,113,]),'PDER':([7,8,16,30,65,69,73,74,95,112,121,123,128,129,131,],[9,-2,-3,34,80,-48,-49,-51,-50,116,126,-35,130,131,-34,]),'VAR':([11,13,14,18,32,54,],[15,15,-5,-4,-7,-6,]),'FUNC':([13,14,17,18,19,23,32,36,54,55,],[20,-5,20,-4,-13,-12,-7,-14,-6,-15,]),'CIZQ':([21,22,33,49,77,],[25,-11,-10,66,66,]),'COMMA':([21,22,33,69,73,74,95,113,119,],[28,-11,-10,-48,-49,-51,-50,117,125,]),'INT':([21,22,33,66,117,],[29,-11,-10,81,122,]),'FLOAT64':([21,22,33,35,],[26,-11,-10,38,]),'INTLITERAL':([25,51,62,63,66,71,85,86,87,88,89,90,91,92,93,94,97,115,117,125,127,],[31,73,73,73,73,95,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'CDER':([31,69,73,74,82,95,116,],[35,-48,-49,-51,98,-50,120,]),'LIZQ':([34,68,69,70,73,74,95,101,102,103,104,105,106,107,108,109,110,130,],[37,84,-48,-47,-49,-51,-50,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,]),'FMT':([37,39,40,43,45,56,57,58,59,60,61,64,124,],[50,50,-17,-20,-22,-16,-18,-19,-21,-23,-24,-27,-29,]),'IF':([37,39,40,43,45,56,57,58,59,60,61,64,124,],[51,51,-17,-20,-22,-16,-18,-19,-21,-23,-24,-27,-29,]),'GOTO':([37,39,40,43,45,56,57,58,59,60,61,64,84,124,],[52,52,-17,-20,-22,-16,-18,-19,-21,-23,-24,-27,100,-29,]),'RETURN':([37,39,40,43,45,56,57,58,59,60,61,64,124,],[53,53,-17,-20,-22,-16,-18,-19,-21,-23,-24,-27,-29,]),'LDER':([39,40,43,45,56,57,58,59,60,61,64,118,124,],[55,-17,-20,-22,-16,-18,-19,-21,-23,-24,-27,124,-29,]),'EQUALS':([48,49,98,120,],[62,63,-53,-52,]),'COLON':([49,],[64,]),'PUNTO':([50,72,],[67,96,]),'MATH':([51,63,],[72,72,]),'MINUS':([51,62,63,66,69,70,73,74,77,85,86,87,88,89,90,91,92,93,94,95,97,115,117,125,127,],[71,71,71,71,-48,86,-49,-51,-48,71,71,71,71,71,71,71,71,71,71,-50,71,71,71,71,71,]),'FLOATLITERAL':([51,62,63,66,85,86,87,88,89,90,91,92,93,94,97,115,117,125,127,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'PRINTF':([67,],[83,]),'PLUS':([69,70,73,74,77,95,],[-48,85,-49,-51,-48,-50,]),'MULTI':([69,70,73,74,77,95,],[-48,87,-49,-51,-48,-50,]),'DIV':([69,70,73,74,77,95,],[-48,88,-49,-51,-48,-50,]),'GREATER':([69,70,73,74,77,95,],[-48,89,-49,-51,-48,-50,]),'LESS':([69,70,73,74,77,95,],[-48,90,-49,-51,-48,-50,]),'GREATEREQUAL':([69,70,73,74,77,95,],[-48,91,-49,-51,-48,-50,]),'LESSEQUAL':([69,70,73,74,77,95,],[-48,92,-49,-51,-48,-50,]),'EQUALSEQUALS':([69,70,73,74,77,95,],[-48,93,-49,-51,-48,-50,]),'DISTINT':([69,70,73,74,77,95,],[-48,94,-49,-51,-48,-50,]),'MOD':([96,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'IMPORTS':([6,],[7,]),'declarations':([11,],[13,]),'declaration':([11,13,],[14,18,]),'codeList':([13,],[17,]),'code':([13,17,],[19,23,]),'idList':([15,],[21,]),'type':([21,],[27,]),'statement':([34,],[36,]),'instructions':([37,],[39,]),'instruction':([37,39,],[40,56,]),'assign':([37,39,],[41,41,]),'print':([37,39,],[42,42,]),'if':([37,39,],[43,43,]),'gotoSt':([37,39,],[44,44,]),'label':([37,39,],[45,45,]),'callFunc':([37,39,],[46,46,]),'retSt':([37,39,],[47,47,]),'access':([37,39,63,],[48,48,79,]),'expression':([51,63,],[68,78,]),'finalExp':([51,62,63,66,85,86,87,88,89,90,91,92,93,94,97,115,117,125,127,],[70,76,70,82,101,102,103,104,105,106,107,108,109,110,112,119,123,128,129,]),'printValue':([117,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE ID PTCOMA IMPORT PIZQ IMPORTS PDER PTCOMA declarations codeList','start',10,'p_start','grammar.py',141),
  ('IMPORTS -> STRINGLITERAL','IMPORTS',1,'p_imports','grammar.py',145),
  ('IMPORTS -> STRINGLITERAL PTCOMA STRINGLITERAL PTCOMA','IMPORTS',4,'p_imports','grammar.py',146),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','grammar.py',153),
  ('declarations -> declaration','declarations',1,'p_declarations','grammar.py',154),
  ('declaration -> VAR idList CIZQ INTLITERAL CDER FLOAT64 PTCOMA','declaration',7,'p_declaration','grammar.py',162),
  ('declaration -> VAR idList type PTCOMA','declaration',4,'p_declaration','grammar.py',163),
  ('type -> INT','type',1,'p_type','grammar.py',170),
  ('type -> FLOAT64','type',1,'p_type','grammar.py',171),
  ('idList -> idList COMMA ID','idList',3,'p_idList','grammar.py',178),
  ('idList -> ID','idList',1,'p_idList','grammar.py',179),
  ('codeList -> codeList code','codeList',2,'p_codeList','grammar.py',186),
  ('codeList -> code','codeList',1,'p_codeList','grammar.py',187),
  ('code -> FUNC ID PIZQ PDER statement','code',5,'p_code','grammar.py',195),
  ('statement -> LIZQ instructions LDER','statement',3,'p_statement','grammar.py',200),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',205),
  ('instructions -> instruction','instructions',1,'p_instructions','grammar.py',206),
  ('instruction -> assign PTCOMA','instruction',2,'p_instruction','grammar.py',214),
  ('instruction -> print PTCOMA','instruction',2,'p_instruction','grammar.py',215),
  ('instruction -> if','instruction',1,'p_instruction','grammar.py',216),
  ('instruction -> gotoSt PTCOMA','instruction',2,'p_instruction','grammar.py',217),
  ('instruction -> label','instruction',1,'p_instruction','grammar.py',218),
  ('instruction -> callFunc PTCOMA','instruction',2,'p_instruction','grammar.py',219),
  ('instruction -> retSt PTCOMA','instruction',2,'p_instruction','grammar.py',220),
  ('retSt -> RETURN','retSt',1,'p_return','grammar.py',224),
  ('callFunc -> ID PIZQ PDER','callFunc',3,'p_callFunc','grammar.py',229),
  ('label -> ID COLON','label',2,'p_label','grammar.py',233),
  ('gotoSt -> GOTO ID','gotoSt',2,'p_goto','grammar.py',237),
  ('if -> IF expression LIZQ GOTO ID PTCOMA LDER','if',7,'p_if','grammar.py',241),
  ('assign -> access EQUALS finalExp','assign',3,'p_assign','grammar.py',245),
  ('assign -> ID EQUALS expression','assign',3,'p_assign2','grammar.py',249),
  ('assign -> ID EQUALS access','assign',3,'p_assign2','grammar.py',250),
  ('print -> FMT PUNTO PRINTF PIZQ STRINGLITERAL COMMA printValue PDER','print',8,'p_print','grammar.py',255),
  ('printValue -> INT PIZQ finalExp PDER','printValue',4,'p_printValue','grammar.py',259),
  ('printValue -> finalExp','printValue',1,'p_printValue','grammar.py',260),
  ('expression -> finalExp PLUS finalExp','expression',3,'p_expression','grammar.py',268),
  ('expression -> finalExp MINUS finalExp','expression',3,'p_expression','grammar.py',269),
  ('expression -> finalExp MULTI finalExp','expression',3,'p_expression','grammar.py',270),
  ('expression -> finalExp DIV finalExp','expression',3,'p_expression','grammar.py',271),
  ('expression -> finalExp GREATER finalExp','expression',3,'p_expression','grammar.py',272),
  ('expression -> finalExp LESS finalExp','expression',3,'p_expression','grammar.py',273),
  ('expression -> finalExp GREATEREQUAL finalExp','expression',3,'p_expression','grammar.py',274),
  ('expression -> finalExp LESSEQUAL finalExp','expression',3,'p_expression','grammar.py',275),
  ('expression -> finalExp EQUALSEQUALS finalExp','expression',3,'p_expression','grammar.py',276),
  ('expression -> finalExp DISTINT finalExp','expression',3,'p_expression','grammar.py',277),
  ('expression -> MATH PUNTO MOD PIZQ finalExp COMMA finalExp PDER','expression',8,'p_expression','grammar.py',278),
  ('expression -> finalExp','expression',1,'p_expression','grammar.py',279),
  ('finalExp -> ID','finalExp',1,'p_finalExp','grammar.py',292),
  ('finalExp -> INTLITERAL','finalExp',1,'p_finalExp','grammar.py',293),
  ('finalExp -> MINUS INTLITERAL','finalExp',2,'p_finalExp','grammar.py',294),
  ('finalExp -> FLOATLITERAL','finalExp',1,'p_finalExp','grammar.py',295),
  ('access -> ID CIZQ INT PIZQ finalExp PDER CDER','access',7,'p_access','grammar.py',303),
  ('access -> ID CIZQ finalExp CDER','access',4,'p_access','grammar.py',304),
]
